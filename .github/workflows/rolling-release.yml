# Workflow Name: Unified Release Rolling & Bananas
name: Rolling Release

# Trigger: Runs on push to any branch OR on push of any tag
on:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Debug Context Variables
        run: |
          echo "Triggering Ref: ${{ github.ref }}"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "Event Name: ${{ github.event_name }}"

      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Prepare the release version using YYMMDD format
      - name: Prepare Release Version (YYMMDD)
        run: echo "VERSION=$(git log -1 --pretty=format:%cd --date=format:%y%m%d)" >> $GITHUB_ENV

      # Step 3: Generate dynamic release notes from Git history for all releases
      - name: Generate Dynamic Release Notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)
          CHANGELOG_BODY=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:'* %s')
          {
            echo "CHANGELOG_BODY<<EOF"
            echo -e "Changes since ${PREVIOUS_TAG}:\n"
            echo "${CHANGELOG_BODY}"
            echo "EOF"
          } >> "$GITHUB_ENV"
      
      # Step 4: Set up release parameters based on the trigger
      - name: Prepare Release Parameters
        run: |
          case "${{ github.ref }}" in
            refs/heads/*)
              echo "RELEASE_TAG_NAME=${{ env.VERSION }}" >> $GITHUB_ENV
              echo "RELEASE_NAME=Trans AI Rolling Release (Branch: ${{ github.ref_name }}) ${{ env.VERSION }}" >> $GITHUB_ENV
              ;;
            refs/tags/*)
              TAG_NAME=${{ github.ref_name }}
              echo "RELEASE_TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
              echo "RELEASE_NAME=Trans AI Release ${TAG_NAME} for Bananas Content Service" >> $GITHUB_ENV
              ;;
            *)
              echo "::error::Unexpected trigger ref: ${{ github.ref }}. Could not determine release parameters."
              exit 1
              ;;
          esac

      # Step 5: Prepare the staging directory
      - name: Prepare Staging Directory
        run: mkdir -p staging/Trans-AI_${{ env.VERSION }}

      # Step 6: Copy project files using git archive to respect .gitignore
      - name: Copy Project Files via Git Archive
        run: git archive --format=tar HEAD | tar -x -C staging/Trans-AI_${{ env.VERSION }}/

      # Step 7: Update the version number inside info.nut
      - name: Update Version in info.nut
        run: sed -i 's/return 300101/return ${{ env.VERSION }}/g' staging/Trans-AI_${{ env.VERSION }}/info.nut

      # Step 8: Create the final release archives (tar and zip)
      - name: Create Final Release Archives
        run: |
          cd staging
          tar -cf ../Trans-AI_${{ env.VERSION }}.tar Trans-AI_${{ env.VERSION }}
          cd ..

      # Step 9: Create GitHub Release using the official GitHub CLI
      - name: Create GitHub Release
        if: env.RELEASE_TAG_NAME != '' # Ensure parameters were set
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Hapus rilis dengan tag yang sama jika sudah ada, untuk memungkinkan penimpaan.
          # '|| true' memastikan langkah ini tidak gagal jika rilisnya belum ada.
          gh release delete "${{ env.RELEASE_TAG_NAME }}" --yes || true

          # Buat rilis baru, tandai sebagai "Latest", dan isi dengan detail yang sudah disiapkan.
          gh release create "${{ env.RELEASE_TAG_NAME }}" \
            --latest \
            --title "${{ env.RELEASE_NAME }}" \
            --notes "${{ env.CHANGELOG_BODY }}"

          # Unggah file-file aset ke rilis yang baru dibuat.
          gh release upload "${{ env.RELEASE_TAG_NAME }}" \
            "Trans-AI_${{ env.VERSION }}.tar"
            
