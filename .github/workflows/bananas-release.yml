# Nama alur kerja: Rilis khusus untuk distribusi 'Bananas'
name: Bananas Release

# Pemicu: Alur kerja ini akan berjalan setiap kali tag 'bananas' di-push
on:
  push:
    tags:
      - 'bananas'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Langkah 1: Mengambil kode dari repositori Anda, termasuk riwayat git lengkap
      - name: Checkout Kode
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Langkah 2: Dapatkan versi YYMMDD untuk penamaan file
      - name: Get release version (YYMMDD)
        run: echo "VERSION=$(git log -1 --pretty=format:%cd --date=format:%y%m%d)" >> $GITHUB_ENV

      # Langkah 3: Buat catatan rilis dinamis dari pesan commit
      # Ini akan mencari tag paling akhir sebelum 'HEAD' dan membuat daftar commit di antaranya.
      - name: Note a dynamic release log
        id: generate_changelog
        run: |
          # Cari tag terbaru sebelum commit saat ini untuk dijadikan titik awal.
          # Jika tidak ada tag sebelumnya (misal, ini rilis pertama), gunakan commit pertama sebagai awal.
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Titik awal changelog: ${PREVIOUS_TAG}"

          # Buat daftar pesan commit antara tag sebelumnya dan HEAD (tag 'bananas' saat ini)
          CHANGELOG_BODY=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:'* %s')
          
          # Simpan changelog ke variabel environment untuk digunakan nanti
          {
            echo "CHANGELOG_BODY<<EOF"
            echo -e "Perubahan sejak ${PREVIOUS_TAG}:\n"
            echo "${CHANGELOG_BODY}"
            echo "EOF"
          } >> "$GITHUB_ENV"

      # Langkah 4-7: Proses ini sama seperti alur kerja rolling release
      # (staging, copy, update info.nut, dan archive)
      - name: Staging Directory
        run: mkdir -p staging/Trans-AI_${{ env.VERSION }}

      - name: Copy Project file to Staging
        run: git archive --format=tar HEAD | tar -x -C staging/Trans-AI_${{ env.VERSION }}/

      - name: Change Version in info.nut
        run: sed -i 's/return 200101/return ${{ env.VERSION }}/g' staging/Trans-AI_${{ env.VERSION }}/info.nut

      - name: Final Release
        run: |
          cd staging
          tar -cf ../Trans-AI_${{ env.VERSION }}.tar Trans-AI_${{ env.VERSION }}
          cd ..

      # Langkah 8: Buat atau Perbarui Rilisan GitHub 'bananas'
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Tag harus 'bananas' sesuai pemicu
          tag_name: bananas
          # Nama rilis yang akan ditampilkan
          name: "Trans AI Bananas Release ${{ env.VERSION }}"
          # Badan rilis diisi dari catatan rilis yang kita buat di Langkah 3
          body: ${{ env.CHANGELOG_BODY }}
          # File yang akan diunggah sebagai aset
          files: |
            Trans-AI_${{ env.VERSION }}.tar            
          # Izinkan action untuk menimpa rilis jika tag 'bananas' sudah ada
          # Ini penting untuk skenario force re-tag Anda
          make_latest: true